#!/usr/bin/env python3
# Usage: bb list [-h] [-S SCOPE]
# Summary: List available recipes / provides
# Help: See bb list -h for detailed usage information.

import logging
import os
import sys
from collections import defaultdict

import bb.event

import bbcmd

logger = logging.getLogger('bb.list')


def iter_except(func, exception, first=None):
      """Call a function repeatedly until an exception is raised.

      Converts a call-until-exception interface to an iterator interface.
      Like __builtin__.iter(func, sentinel) but uses an exception instead
      of a sentinel to end the loop.

      Examples:
          bsddbiter = iter_except(db.next, bsddb.error, db.first)
          heapiter = iter_except(functools.partial(heappop, h), IndexError)
          dictiter = iter_except(d.popitem, KeyError)
          dequeiter = iter_except(d.popleft, IndexError)
          queueiter = iter_except(q.get_nowait, Queue.Empty)
          setiter = iter_except(s.pop, KeyError)

      """
      try:
          if first is not None:
              yield first()
          while 1:
              yield func()
      except exception:
          pass


def get_depgraph(tinfoil, targets, task='do_build'):
    depgraph = None

    tinfoil.set_event_mask(['bb.event.DepTreeGenerated', 'bb.command.CommandCompleted', 'bb.event.NoProvider', 'bb.command.CommandFailed', 'bb.command.CommandExit'])
    if not tinfoil.run_command('generateDepTreeEvent', targets, task):
        logger.critical('Error starting dep tree event command')
        return 1

    for event in iter_except(lambda: tinfoil.wait_event(0.25), Exception):
        if event is None:
            continue
        if isinstance(event, bb.command.CommandCompleted):
            break
        elif isinstance(event, bb.command.CommandFailed):
            return None, 'Error running command: %s' % event.error
        elif isinstance(event, bb.command.CommandExit):
            return None, 'Error running command: exited with %s' % event.exitcode
        elif isinstance(event, bb.event.NoProvider):
            if event._reasons:
                return None, 'Nothing provides %s: %s' % (event._item, event._reasons)
            else:
                return None, 'Nothing provides %s.' % event._item
        elif isinstance(event, bb.event.DepTreeGenerated):
            depgraph = event._depgraph
            break
        elif isinstance(event, logging.LogRecord):
            logger.handle(event)
        else:
            logger.warning('Unhandled event %s: %s' % (event.__class__.__name__, event))

    return depgraph, None


def walk_depends(depends, target, seen=None):
    if seen is None:
        seen = set()

    if target in seen:
        return
    else:
        seen.add(target)

    for depend in depends[target]:
        yield from walk_depends(depends, depend, seen)
    yield target


def list(args):
    bbcmd.setup_log_handler(logging.getLogger('bb'))

    with bb.tinfoil.Tinfoil() as tinfoil:
        tinfoil.prepare()

        recipes, provides = set(), defaultdict(set)
        if args.scope:
            try:
                recipe, task = args.scope.rsplit(':', 1)
            except ValueError:
                recipe, task = args.scope, 'do_build'

            depgraph, error = get_depgraph(tinfoil, [recipe], task)
            if error is not None:
                sys.exit(error)

            for item in walk_depends(depgraph['tdepends'], '%s.%s' % (recipe, task)):
                recipe, task = item.rsplit('.', 1)
                recipes.add(recipe)

            for provide, (pn, version) in depgraph['providermap'].items():
                if pn in recipes:
                    provides[pn].add(provide)
        else:
            for mc in tinfoil.cooker.multiconfigs:
                cache_data = tinfoil.cooker.recipecaches[mc]
                pkg_pn = cache_data.pkg_pn
                latest_versions, preferred_versions, required_versions = tinfoil.find_providers(mc)
                for pn in pkg_pn:
                    recipes.add(pn)
                    pref_ver, pref_file = preferred_versions[pn]

                    provides[pn] = set(cache_data.fn_provides[pref_file])
                    provides[pn].discard(pn)

        for pn in sorted(recipes):
            print(pn)
            for provide in provides[pn]:
                print('  ' + provide)


# provide bb completions
def main(arguments):
    parser = bbcmd.CompleteParser()
    parser.add_argument('-S', '--scope',
                        help='specify a target scope (rather than all recipes. ex. -S core-image-base)',
                        default=(os.getenv('BB_RECIPE_SCOPE') or None))
    args = parser.parse_args(arguments)
    if args is None:
        # showing completions
        return
    else:
        return list(args)


if __name__ == '__main__':
    bbcmd.run_main(main)
