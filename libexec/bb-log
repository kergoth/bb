#!/usr/bin/env python3
# Usage: bb log [recipe] [task]
# Summary: Show bitbake logs
# Help: See bb log -h for detailed usage information.

import logging
import os
import sys
import bbcmd
import bb

logger = logging.getLogger('bb.log')

def get_latest(directory, prefix=None, skip_empty=False):
    # Get the list of files
    files = [os.path.join(directory, f) for f in os.listdir(directory)]
    # Possibly filter out files that don't match the prefix
    if prefix:
        files = filter(lambda f: os.path.basename(f).startswith(prefix), files)
    # Possibly lilter out empty files
    if skip_empty:
        files = filter(lambda f: os.path.getsize(f) > 0, files)
    return max(files, key=os.path.getmtime)

def cooker_log():
    bbcmd.setup_log_handler(logging.getLogger('bb'))
    with bb.tinfoil.Tinfoil() as tinfoil:
        tinfoil.prepare(config_only=True)
        d = tinfoil.config_data
        logdir = os.path.join(d.getVar("LOG_DIR", True),
                            "cooker",
                            d.getVar("MACHINE", True))
        os.system("less %s" % get_latest(logdir, skip_empty=True))


def recipe_log(recipe, task, basename):
    bbcmd.setup_log_handler(logging.getLogger('bb'))
    with bb.tinfoil.Tinfoil() as tinfoil:
        tinfoil.prepare()
        data = tinfoil.parse_recipe(recipe)
        tempdir = data.getVar("T")

        if task is None:
            os.system("less %s" % get_latest(tempdir, basename))
        else:
            # Latest log for this task, so just follow the symlink.
            # TODO use get_latest?
            os.system("less %s/%s%s" % (tempdir, basename, task))

# provide bb completions
def main(arguments):
    parser = bbcmd.CompleteParser()
    # TODO
    # no arguments -> latest cooker log
    # just recipe -> latest recipe log ("the one that just failed")
    parser.add_argument('recipe', help='recipe name', nargs='?')
    parser.add_argument('task', help='task name', nargs='?')
    parser.add_argument('-r', '--run', help='show the run, not log', action="store_true")
    args = parser.parse_args(arguments)

    if args is None:
        # showing completions
        return
    elif args.recipe is None:
        return cooker_log()
    else:
        basename = args.run and "run.do_" or "log.do_"
        return recipe_log(args.recipe, args.task, basename)


if __name__ == '__main__':
    try:
        bbcmd.run_main(main)
    except bb.BBHandledException:
        sys.exit(1)
